//7th A//




#include<stdio.h>
#include<conio.h>
#include<string.h>
void main()
 {
 int a[20],b[30],i,j,k,count,n;
clrscr();
printf("enter frame length:");
scanf("%d",&n);
printf("enter input frame(0's&1's only):");
for(i=0;i<n;i++)
scanf("%d",&a[i]);
i=0;count=1;j=0;
while(i<n)
{
 if(a[i]==1)
{
 b[j]=a[i];
 for(k=i+1;a[k]==1&&k<n&&count<5;k++)
{
 j++; b[j]=a[k];
 count++;
 if(count==5)
{
 j++;
 b[j]=0;
}
i=k;
}
}
else {
 b[j]=a[i];
}
i++;
j++;
}
printf("After stuffing the frame is:");
for(i=0;i<j;i++)
printf("%d",b[i]);
getch();
}




//7th b//




//program for character stuffing
#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<process.h>
void main()
{
{
int i=0,j=0,n,pos; char a[20],b[50],ch;
clrscr();
printf("enter string:\n");
scanf("%s",&a);
n=strlen(a);
printf("enter position\n");
scanf("%d",&pos);
if(pos>n)
{
printf("invalid position,Enter again:");
scanf("%d",&pos);
}
printf("enter the character\n");
ch=getche();
b[0]='d';
b[1]='l';
b[2]='e';
b[3]='s';
b[4]='t';
b[5]='x';
j=6;
while(i<n)
{
if(i==pos-1)
{
b[j]='d';
b[j+1]='l';
b[j+2]='e';
b[j+3]=ch;
b[j+4]='d';
b[j+5]='l';
b[j+6]='e';
j=j+7;
}
if(a[i]=='d'&&a[i+1]=='l'&& a[i+2]=='e')
{
b[j]='d';
b[j+1]='l';
b[j+2]='e;
j=j+3;
}
b[j]=a[i];
i++;
j++;
}
b[j]='d';
b[j+1]='l';
b[j+2]='e';
b[j+3]='e';
b[j+4]='t';
b[j+5]='x';
b[j+6]='\0';
printf("\n frame after stuffing: \n");
printf("%s",b);
getch();
}



//8th //



#include<stdio.h>
struct node
{
 unsigned dist[20];
 unsigned from[20];
}rt[10];
int main()
{
 int costmat[20][20];
 int nodes,i,j,k,count=0;
 printf("\nEnter the number of nodes : ");
 scanf("%d",&nodes);//Enter the nodes
 printf("\nEnter the cost matrix :\n");
 for(i=0;i<nodes;i++)
 {
 for(j=0;j<nodes;j++)
 {
 scanf("%d",&costmat[i][j]);
 costmat[i][i]=0;
 rt[i].dist[j]=costmat[i][j];//initialise
the distance equal to cost matrix
 rt[i].from[j]=j;
 }
 }
 do
 {
 count=0;
 for(i=0;i<nodes;i++)//We choose arbitary vertex k
and we calculate the direct distance from the node i to k
using the cost matrix
 //and add the distance from k to node j
 for(j=0;j<nodes;j++)
 for(k=0;k<nodes;k++)
 if(rt[i].dist[j]>costmat[i][k]+rt[k].dist[j])
 {//We calculate the minimum distance
 rt[i].dist[j]=rt[i].dist[k]+rt[k].dist[j];
rt[i].from[j]=k;
count++;
 }
 }while(count!=0);
 for(i=0;i<nodes;i++)
 {
 printf("\n\n For router %d\n",i+1);
 for(j=0;j<nodes;j++)
 {
 printf("\t\nnode %d via %d Distance %d
",j+1,rt[i].from[j]+1,rt[i].dist[j]);
 }
 }
 printf("\n\n");
 getch();
}


//10th//




#include<stdio.h>
 #include<conio.h>

 int main(void)
{
int data[50],div[16],rem[16];
int datalen, divlen, i,j,k;
int ch;
clrscr();
printf("Enter the data: ");
i = 0;
while((ch = fgetc(stdin)) != '\n')
{
if(ch == '1')
data[i] = 1;
else
data[i] = 0;
i++;
}
datalen = i;
printf("\nEnter the divisor: ");
i = 0;
while((ch = fgetc(stdin)) != '\n')
{
if(ch == '1')
div[i] = 1;
else
div[i] = 0;
i++;
}
divlen = i;
for(i = datalen ; i < datalen + divlen - 1 ; i++)
data[i] = 0;
datalen = datalen + divlen - 1;
for(i = 0 ; i < divlen ; i++)
rem[i] = data[i]; k = divlen-1;
while(k < datalen)
if(rem[0] == 1)
{
for(i = 0 ; i < divlen ; i++)
rem[i] = rem[i] ^ div[i];
}
Else
{
if(k == datalen-1)
break;
for(i = 0 ; i < divlen-1 ; i++)
{
rem[i] = rem[i+1];
printf("%d",rem[i]);
}
rem[i] = data[++k];
printf("%d\n",rem[i]);
}
j=1;
for(i = datalen - divlen + 1 ; i < datalen ; i++)
{
data[i] = rem[j++];
}
printf("\nThe data to be sent is\n");
for(i = 0 ; i < datalen ; i++)
printf("%d",data[i]);
getch();
return 0;
}


//11th pgm//


#include<stdio.h>
#include<string.h>
#include<conio.h>
#include<process.h>
#include<stdlib.h>

struct packet
{
	int time;
	int size;
}p[50];

int main()
{
	int i,m,n,k=0;
	int bfilled,bsize,outrate;
	
	printf("enter the no of packets\n");
	scanf("%d",&n);
	printf("enter packtes in arrival time\n");
	for(i=0;i<n;i++)
	{
		printf("enter the time n size\n");
		scanf("%d%d",&p[i].time,&p[i].size);
	}
	printf("\n enter the bucket size\n");
	scanf("%d",&bsize);
	
	printf("enter the output rate\n");
	scanf("%d",&outrate);
	
	m=p[n-1].time; i=1;bfilled=0;
	
	while(i<=m || bfilled!=0)
	{
		printf("\n\n at time %d\n",i);
		if(p[k].time==i)
		{
			if(bsize>=bfilled+p[k].size)
			{
				bfilled=bfilled+p[k].size;
				printf("\n%d bytes are inserted",p[k].size);
				k=k+1;
			}
			else
			{
				printf("\n%d byets are discarded",p[k].size);
			    k=k+1;
			}
		}
		if(bfilled==0)
		{
			printf("no bytes to transfer\n");
		}
		else if(bfilled>=outrate)
		{
			bfilled=bfilled-outrate;
			printf("%d bytes are tranfered\n",outrate);
		}
		else
		{
			printf("%d bytes are transfered\n",bfilled);
			bfilled=0;
		}
		printf("packets remaining in bucket is %d\n",bfilled);
		i++;
	}

	return 0;
}




//12TH PGMS//



#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>

#define PORT 8080
#define MAXLINE 1024

// Driver code
int main() {
 int sockfd;
 char buffer[MAXLINE];
 char *hello = "Hello from server";
 struct sockaddr_in servaddr, cliaddr;

 // Creating socket file descriptor
 if ( (sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0 ) {
 perror("socket creation failed");
 exit(EXIT_FAILURE);
 }

 memset(&servaddr, 0, sizeof(servaddr));
 memset(&cliaddr, 0, sizeof(cliaddr));

 // Filling server information
 servaddr.sin_family = AF_INET; // IPv4
 servaddr.sin_addr.s_addr = INADDR_ANY;
 servaddr.sin_port = htons(PORT);

 // Bind the socket with the server address
 if ( bind(sockfd, (const struct sockaddr *)&servaddr,
 sizeof(servaddr)) < 0 )
 {
 perror("bind failed");
 exit(EXIT_FAILURE);
 }

 int len, n;

 len = sizeof(cliaddr); //len is value/resuslt

 n = recvfrom(sockfd, (char *)buffer, MAXLINE,
 MSG_WAITALL, ( struct sockaddr *) &cliaddr,
 &len);
 buffer[n] = '\0';
 printf("Client : %s\n", buffer);
 sendto(sockfd, (const char *)hello, strlen(hello),
 MSG_CONFIRM, (const struct sockaddr *) &cliaddr,
 len);
 printf("Hello message sent.\n");

 return 0;
}
// CLIENT SIDE CODE
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>

#define PORT 8080
#define MAXLINE 1024

// Driver code
int main() {
 int sockfd;
 char buffer[MAXLINE];
 char *hello = "Hello from client";
 struct sockaddr_in servaddr;

 // Creating socket file descriptor
 if ( (sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0 ) {
 perror("socket creation failed");
 exit(EXIT_FAILURE);
 }

 memset(&servaddr, 0, sizeof(servaddr));

 // Filling server information
 servaddr.sin_family = AF_INET;
 servaddr.sin_port = htons(PORT);
 servaddr.sin_addr.s_addr = INADDR_ANY;

 int n, len;

 sendto(sockfd, (const char *)hello, strlen(hello),
 MSG_CONFIRM, (const struct sockaddr *) &servaddr,
 sizeof(servaddr));
 printf("Hello message sent.\n");

 n = recvfrom(sockfd, (char *)buffer, MAXLINE,
 MSG_WAITALL, (struct sockaddr *) &servaddr,
 &len);
 buffer[n] = '\0';
 printf("Server : %s\n", buffer);

 close(sockfd);
 return 0;
}

